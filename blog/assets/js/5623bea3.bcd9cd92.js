"use strict";(self.webpackChunksmileysblog=self.webpackChunksmileysblog||[]).push([[724],{8296:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"VSCodeConfigs","metadata":{"permalink":"/blog/posts/VSCodeConfigs","editUrl":"https://github.com/b-smiley/b-smiley.github.io/blob/main/web-ui/src/pages/Blog/smileysblog/blog/2024-09-18-vscode-configs.md","source":"@site/blog/2024-09-18-vscode-configs.md","title":"Useful Visual Studio Code Configurations","description":"TLDR","date":"2025-06-21T00:00:00.000Z","tags":[{"inline":false,"label":"Software Engineering","permalink":"/blog/posts/tags/software","description":"Software Engineering topics"}],"readingTime":2.765,"hasTruncateMarker":false,"authors":[{"name":"Brendan Smiley","title":"Software Engineering Student @ University of Calgary","url":"https://brendansmiley.com","page":{"permalink":"/blog/posts/authors/smiley"},"socials":{"github":"https://github.com/b-smiley","linkedin":"https://www.linkedin.com/in/brendan-s-9703ba193/"},"imageURL":"https://github.com/b-smiley.png","key":"smiley"}],"frontMatter":{"slug":"VSCodeConfigs","title":"Useful Visual Studio Code Configurations","date":"2025-6-21","authors":"smiley","tags":["software"]},"unlisted":false,"nextItem":{"title":"Using GDB to Debug C and C++","permalink":"/blog/posts/GDBinCygwin"}},"content":"## TLDR\\n\\nThis is a quick reference for useful Visual Studio Code (VsCode) configurations that I use. It includes custom keybindings and default keybindings that I find helpful for productivity. I apologize for the lack of explanation, but I wanted to keep this as a quick reference. I hope you learn a new hotkey or configuration that you find useful.\\n\\n## Custom\\n\\n1. `CTRL + R + CTRL + R` to run code\\n   - Custom Python run command. Go to keyboard shortcut settings and search for \\"python\\" to find multiple python run commands. I bind one of these to a custom hotkey to speed up my workflow.\\n2. `CTRL + ALT + ?` to go to definition\\n   - Super useful for navigating code quickly. Instead of doing `CTRL + Click` to go to definition, I use this hotkey to quickly jump to the definition of a function or variable. This is especially useful in large codebases where you need to navigate through multiple files. You can combine this with `ALT + \u2190` and `ALT + \u2192` to navigate through the history of definitions you have visited. **These 3 hotkey combos are by far my most used hotkeys**. I can understand how code is related much quicker.\\n3. `ALT + ?` to view definition or error message on hover\\n\\n   - Super useful for understanding code quickly. Anything you typically can see when you hover over it will be available with this hotkey. This can show variable types, function docstrings, warning messages, and more.\\n\\n4. Format on Save (`CTRL + S`)\\n   - Configure in settings, search for \\"format on save\\" and enable it.\\n\\n## Visual Studio Code Defaults\\n\\n1. `Alt + \u2190` or `Alt + \u2192` to navigate through history\\n   - Used in conjunction with `CTRL + ALT + ?` to navigate through definitions and errors. **These 3 hotkeys are my most used hotkeys by far**.\\n2. `CTRL + 1 / 2 / 3 / 4` to navigate through different text editor groups\\n3. `CTRL + T` to switch files within the current editor group\\n4. `CTRL + Shift + P` to open command palette\\n5. `CTRL + D` get matching occurrences of selected text\\n6. `Home` and `End` to move to beginning and end of line\\n7. `Shift + Home` and `Shift + End` to select to beginning and end of line\\n8. `Shift + Alt + \u2191` or `Shift + Alt + Down` to move line up or down\\n9. `CTRL + F` to find text within the file\\n10. `CTRL + SHIFT + F` to find text across all files\\n    - This is a must for massive codebases. Good luck finding a class\'s method usage without this.\\n11. `CTRL + ?` to toggle comments\\n    - This had built-in language detection, so it will comment out the code in the language you are using. For example, in Python it will use `#`, in C++ it will use `//`, and in HTML it will use `\x3c!-- --\x3e`. Now you don\'t have to remember the comment syntax for each language you use!\\n12. `CTRL + \u2190` or `CTRL + \u2192` to move the cursor to the next or previous word\\n\\nI will continue to update this page with more useful configurations as I discover them. If you have any suggestions, feel free to reach out!"},{"id":"GDBinCygwin","metadata":{"permalink":"/blog/posts/GDBinCygwin","editUrl":"https://github.com/b-smiley/b-smiley.github.io/blob/main/web-ui/src/pages/Blog/smileysblog/blog/2024-09-10-gdb-usage.md","source":"@site/blog/2024-09-10-gdb-usage.md","title":"Using GDB to Debug C and C++","description":"TLDR","date":"2024-09-21T00:00:00.000Z","tags":[{"inline":false,"label":"Software Engineering","permalink":"/blog/posts/tags/software","description":"Software Engineering topics"}],"readingTime":6.205,"hasTruncateMarker":false,"authors":[{"name":"Brendan Smiley","title":"Software Engineering Student @ University of Calgary","url":"https://brendansmiley.com","page":{"permalink":"/blog/posts/authors/smiley"},"socials":{"github":"https://github.com/b-smiley","linkedin":"https://www.linkedin.com/in/brendan-s-9703ba193/"},"imageURL":"https://github.com/b-smiley.png","key":"smiley"}],"frontMatter":{"slug":"GDBinCygwin","title":"Using GDB to Debug C and C++","date":"2024-09-21T00:00:00.000Z","authors":"smiley","tags":["software"]},"unlisted":false,"prevItem":{"title":"Useful Visual Studio Code Configurations","permalink":"/blog/posts/VSCodeConfigs"},"nextItem":{"title":"Docusaurus in React GH Pages","permalink":"/blog/posts/Adding Docusaurus Blog"}},"content":"## TLDR\\n\\nA beginner\'s guides to debugging C and C++ programs. The goal of this page is to be a reference to come back to when you want to debug with GDB.\\nThe first few sections are more educational and provide a basic understanding of GDB and Cygwin. The later sections are more practical and provide a reference for using GDB in Cygwin.\\n\\n## Other Options\\n\\nSince originally writing this, I have found that using Visual Studio Code with\\nthe C/C++ extension is a _much_ better option for debugging C and C++ programs.\\nHowever, in my _opinion_, there is still a steeper learning curve to configuring C++\\nin Visual Studio Code. A big reason it is harder to use for a beginner is because you have to understand how VsCode is configuring the debugger and how it is using GDB or LLDB under the hood.\\n\\nYou might opt for cygwin to get a more basic and native experience with\\nC and C++ debugging. You will also understand the Visual Studio Code debugger better if you\\nstart with GDB in Cygwin (VsCode uses GDB, LLDB, etc under the hood for C and C++ debugging).\\n\\n## Setting Up Cygwin\\n\\nWhat is Cygwin? [Cygwin](https://www.cygwin.com/) is a Unix-like environment for Windows. It allows\\ndevelopers to have access to a more Unix-like terminal and tools. I say\\n\\"Unix-like\\" because it is not a full Unix system. Cygwin uses a DLL called\\n`cygwin1.dll` to interact with Windows. To have a full Unix, Linux system on your Windows machine, see\\n[WSL](https://docs.microsoft.com/en-us/windows/wsl/install) or [Virtual Machines](https://www.virtualbox.org/).\\n\\nTo set up Cygwin, you can follow the instructions on the [Cygwin\\nwebsite](https://www.cygwin.com/). The Cygwin installer is named `setup-x86_64.exe`. There are different mirrors you can select\\nfrom, they all should provide the packages being downloaded. Continue to the download page. On the download page, there are different buttons like filters and version selections you can use to\\ncustomize your Cygwin install. If you rerun the installer (`setup-x86_64.exe`), you can update your\\ncustom install. You do not need to install everything (MASSIVE DOWNLOAD!). The recommended installs for this environment setup are the following:\\n\\n- Base Category:\\n  - All packages in the Base category (May be automatically selected)\\n- Devel Category:\\n  - gcc-core\\n  - gcc-g++\\n  - clang\\n  - gdb\\n- Debug Category:\\n  - gdb-debuginfo\\n  - gdbm-debuginfo\\n- nano\\n\\nContinue the install until it is complete. You can also install other packages,\\nsuch as `make`, [`cmake`](https://cmake.org/), and [`git`](https://git-scm.com/)\\nif you want to level up your development environment.\\n\\n## The Cygwin Folder Structure\\n\\nJust a quick note on the Cygwin folder structure. The Cygwin install will create a folder called `C:\\\\cygwin64`. Cygwin will use its own folder structure outside of the Windows folder structure. If you want your project to exist within the Windows folder structure,\\nuse `cd C:// && ls` to get to the root of the C drive. To get back to the Cygwin user folder, use `cd ~`.\\n\\n## Getting Started with GDB\\n\\nThis section will cover a basic step-by-step example of using GDB to debug a binary executable.\\n\\n0. Validate installs: `gdb --version`, `gcc --version`, `g++ --version`,\\n1. Create a simple C or C++ program to debug. For example, create a file with the following steps:\\n\\n   1. Create a file either with Notepad++ or with `nano example.cpp`\\n   2. Write and save a simple program in the file:\\n\\n      ```cpp\\n      #include <iostream>\\n\\n      int main() {\\n          int a = 5;\\n          int b = 0;\\n          std::cout << \\"Enter a number: \\";\\n          std::cin >> b;\\n          std::cout << \\"The sum is: \\" << (a + b) << std::endl;\\n          return 0;\\n      }\\n      ```\\n\\n   3. Validate the file is saved by running `cat example.cpp` to see the contents of the file.\\n   4. Use `g++ -Wall -g -o example example.cpp` to compile the program. The `-Wall` flag enables all warnings, and the `-g` flag includes debugging information in the binary. `-g` is required for GDB to work properly.\\n   5. `ls` to see the compiled binary `example` in the current directory.\\n   6. To run the program with GDB, use `gdb ./example -tui`. The `-tui` flag enables the text user interface for GDB, which is more user-friendly. You don\'t have to use `-tui`, but I find it significantly easier to use and closer to a Visual Studio Code experience.\\n   7. Press enter to start GDB. Once you see `(gdb)`, you are in the GDB terminal. You can use gdb terminal commands to debug the program.\\n   8. `r` to run the program. If you have not set any breakpoints, it will run to completion and exit. If you want to set a breakpoint, see the next step.\\n   9. `b 4` to set a breakpoint at line 4 of the source code.\\n   10. `r` to run the program again. This time, it will stop at the breakpoint you set.\\n   11. `n` to step to the next line of code.\\n   12. `print a` to print the value of `a`. Definitely experiment with printing other types of variables and expressions. You can do pointer dereferencing, arithmetic, and more. This is extremely useful for memory management debugging. The print statement can do A LOT like math `print a + 6` or `print &a`.\\n   13. `n` until you enter a number. After you enter a number, it will look messy on the terminal. This happens when you use `std::cin` or `std::cout`. The terminal will show the output of the program, which can make it hard to read. You can clear the terminal with `CTRL + L` to make it easier to read.\\n   14. `c` to continue running the program until it exits or hits another breakpoint.\\n\\nThat\'s it for the example! Now you can use the [commands below](#useful-commands) to debug the program. I will be adding to this section as I learn more about the GDB terminal.\\n\\n## Useful commands\\n\\nHow I use a minimal C and C++ setup and useful commands. This section is for reference only and therefore the explainations are minimal. You can always search for more information on the commands you are interested in.\\n\\n### Compile and Starting in GDB GUI\\n\\nFor C: `gcc -Wall -g -o <OutputName> <file1.c> <file2.c> && gdb ./<OutputName> -tui`\\n\\nFor C++: `g++ -Wall -g -o <OutputName> <file1.c> <file2.c> && gdb ./<OutputName> -tui`\\n\\n### Using Auto Complete\\n\\n`tab`\\n\\n### Running the application\\n\\n`press enter on GDB start`\\n`r` for run (make sure you have breakpoints set first or it will just run)\\nYou can restart the program by calling `r` again\\n\\n### Use Previous Command\\n\\n`Enter` to run the previous command again\\n\\n### Refresh the GUI screen\\n\\n`CTRL + L`\\n\\n### Next (Step Over)\\n\\n`n`\\n\\n### Step Into\\n\\n`s`\\n\\n### Continue\\n\\n`c`\\n\\n### Exit/Quit GDB\\n\\n`q`\\n\\n### Set a Breakpoint\\n\\n`b <classname>::<methodname>` or `b <linenumber>` or `b <functionName>`\\n\\n### Changing Window Focus\\n\\n`focus cmd` for repeating commands (can use mouse scroll to move source code in this mode)\\n`focus src` to move the displayed source code window (can use arrow keys to move source code in this mode)\\n\\n### Printing\\n\\ncan use `print(<variable>)` for a quick check\\ncan use `printf(\\"<regular c string formatter here>\\");` for a more complex check\\n\\nExample:\\n`print this->idM`\\n`print &this`\\n`print a + 6`\\n\\n### Segmentation Fault - Backtrace\\n\\n`bt` or `backtrace`\\n\\n## References\\n\\nBelow are some additional references that I found useful learning GDB. Definitely check them out to learn much more!\\n\\n- [Cygwin Documentation](https://www.cygwin.com/)\\n- [C in a Nutshell by Peter Prinz & Tony Crawford. Oreilly. Chapter 21: Debugging C Programs with GDB](https://www.oreilly.com/library/view/c-in-a/9781491924174/)\\n- [Old GNU Manual](https://ftp.gnu.org/old-gnu/Manuals/gdb/html_chapter/gdb_19.html)"},{"id":"Adding Docusaurus Blog","metadata":{"permalink":"/blog/posts/Adding Docusaurus Blog","editUrl":"https://github.com/b-smiley/b-smiley.github.io/blob/main/web-ui/src/pages/Blog/smileysblog/blog/2024-08-25-docusaurus-init.md","source":"@site/blog/2024-08-25-docusaurus-init.md","title":"Docusaurus in React GH Pages","description":"A brief overview of how I got Docusaurus to work with React GitHub (GH) Pages.","date":"2024-08-25T00:00:00.000Z","tags":[{"inline":false,"label":"Software Engineering","permalink":"/blog/posts/tags/software","description":"Software Engineering topics"}],"readingTime":2.765,"hasTruncateMarker":true,"authors":[{"name":"Brendan Smiley","title":"Software Engineering Student @ University of Calgary","url":"https://brendansmiley.com","page":{"permalink":"/blog/posts/authors/smiley"},"socials":{"github":"https://github.com/b-smiley","linkedin":"https://www.linkedin.com/in/brendan-s-9703ba193/"},"imageURL":"https://github.com/b-smiley.png","key":"smiley"}],"frontMatter":{"slug":"Adding Docusaurus Blog","title":"Docusaurus in React GH Pages","date":"2024-08-25T00:00:00.000Z","authors":"smiley","tags":["software"]},"unlisted":false,"prevItem":{"title":"Using GDB to Debug C and C++","permalink":"/blog/posts/GDBinCygwin"}},"content":"A brief overview of how I got Docusaurus to work with React GitHub (GH) Pages.\\n\\n\x3c!-- truncate --\x3e\\n\\n# TLDR\\n\\n- Docusaurus is a static site generator that uses markdown files to create a blog.\\n\\n- Docusaurus can be treated as a separate project from React GH Pages. There will be two package.json files, one for the main website and one for the blog.\\n\\n- Docusaurus can be integrated into React GH Pages by creating a new Docusaurus project and adding the build files to the React GH Pages project.\\n\\n- Utilize linking to navigate between the main website and the blog. This can be done with the react-router-dom or window.location.href on the React side and docusaurus.config.js on the Docusaurus side.\\n\\n# Steps\\n\\nThis is not an exhaustive list of steps, but a high level overview of the process I took to get Docusaurus to work with React GH Pages.\\n\\n1. Have a pre-existing React GH Pages project. For more details on setting this up, see the [react gh-pages](https://github.com/gitname/react-gh-pages) repository.\\n\\n2. Create a new Docusaurus project. I personally used the `npm init docusaurus@latest` command to get started. Make sure you place the sub-project in a organized location. I personally, have a pages folder for my main site, so I added a blog folder to the pages folder and placed the Docusaurus project there.\\n\\n   For more details on setting this up, see the [Docusaurus](https://docusaurus.io/docs/installation) website.\\n\\n3. When developing, you will have to run the main website on one port and the blog on another. To navigate between the two, you can create a custom script to help with this.\\n\\n   Here is an example of navigating to the blog from the main website (assumes the main website is running on port 3000 and the blog is running on another port):\\n\\n   ```javascript\\n   export function devProdRoute() {\\n     if (process.env.NODE_ENV === \\"production\\") {\\n       return \\"https://brendansmiley.com\\";\\n     } else {\\n       return \\"http://localhost:3000/\\";\\n     }\\n   }\\n   ```\\n\\n4. **Developing the Blog**\\n\\n   I found that the `docusaurus.config.js` is the most important file to understand how docusaurus works (as a complete beginner). This file is where you can set up blog settings and the routes. My main site is expecting the blog to be at `/blog`, so I set up the `docusaurus.config.js` to have the blog at `/blog`.\\n\\n   Partial Content of `docusaurus.config.js`:\\n\\n   ```javascript\\n   // docusaurus.config.js\\n   // Previous Code ...\\n   const config = {\\n     title: \\"Smiley\'s Blog\\",\\n     tagline: \\"It\'s not a bug, it\'s a feature! \ud83d\udc1e\\",\\n     favicon: \\"img/favicon.ico\\",\\n     url: \\"https://brendansmiley.com\\",\\n     baseUrl: \\"/blog/\\",\\n     // Remaining Code ...\\n   };\\n   ```\\n\\n5. **Building and Deploying**\\n\\n   I put the build files in the same location as the main website build files. This way, I can deploy the blog with the main website. Updating the default react-gh-pages deploy script as follows gives the `npm run deploy` command the ability to deploy the blog as well.\\n\\n   ```javascript\\n   // package.json (Main Website)\\n   // ...\\n   \\"scripts\\": {\\n      \\"predeploy\\": \\"npm run build && npm run build:blog\\",\\n      // ...\\n      \\"deploy\\": \\"gh-pages -d build\\",\\n      // ...\\n      \\"build:blog\\": \\"cd src/pages/Blog/smileysblog && npm run build && mv build ../../../../build/blog\\"\\n   }\\n   // ..\\n   ```\\n\\n# Summary\\n\\nI hope this post helps you get started with Docusaurus in React GH Pages. I found the process to be fun but challenging as there is no abundance of resources on this topic. Enjoy!\\n\\n# References\\n\\n- [react gh-pages](https://github.com/gitname/react-gh-pages)\\n- [Docusaurus](https://docusaurus.io/)\\n- [ChatGPT](https://chatgpt.com/)"}]}}')}}]);